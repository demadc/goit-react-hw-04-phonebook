{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GoIt/goit-react-hw-02-phonebook/src/components/App.jsx\";\n// 2 - Книга контактів\n\n// Напиши застосунок зберігання контактів телефонної книги.\n\n// Крок 1\n\n// Застосунок повинен складатися з форми і списку контактів.\n// На поточному кроці реалізуй додавання імені контакту та відображення списку\n// контактів.Застосунок не повинен зберігати контакти між різними\n// сесіями(оновлення сторінки).\n\n// Використовуйте цю розмітку інпуту з вбудованою валідацією для\n// імені контакту.\n\n// <input\n//   type=\"text\"\n//   name=\"name\"\n//   pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//   pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//   title=\"Name may contain only letters, apostrophe, dash and spaces.\n// For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//   required\n// />\n\n// Стан, що зберігається в батьківському компоненті <App>, обов'язково\n// повинен бути наступного вигляду, додавати нові властивості не можна.\n\n// state = {\n//   contacts: [],\n//   name: ''\n// }\n\n// Кожен контакт повинен бути об'єктом з властивостями name та id.\n// Для генерації ідентифікаторів використовуй будь - який відповідний пакет,\n//   наприклад nanoid.Після завершення цього кроку, застосунок повинен виглядати\n//    приблизно так.\n\n// component preview\n\nimport { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FormComponent } from './Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contacts: [],\n      name: ''\n    };\n    this.handleAddContact = () => {\n      // if (isExist) {\n      //   alert(`${name} is already in contacts.`);\n      //   return;\n      // }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 40,\n        color: '#010101'\n      },\n      children: /*#__PURE__*/_jsxDEV(FormComponent, {\n        onAddContact: this.handleAddContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","nanoid","FormComponent","jsxDEV","_jsxDEV","App","constructor","args","state","contacts","name","handleAddContact","render","style","height","display","justifyContent","alignItems","fontSize","color","children","onAddContact","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/admin/Documents/GoIt/goit-react-hw-02-phonebook/src/components/App.jsx"],"sourcesContent":["// 2 - Книга контактів\n\n// Напиши застосунок зберігання контактів телефонної книги.\n\n// Крок 1\n\n// Застосунок повинен складатися з форми і списку контактів.\n// На поточному кроці реалізуй додавання імені контакту та відображення списку\n// контактів.Застосунок не повинен зберігати контакти між різними\n// сесіями(оновлення сторінки).\n\n// Використовуйте цю розмітку інпуту з вбудованою валідацією для\n// імені контакту.\n\n// <input\n//   type=\"text\"\n//   name=\"name\"\n//   pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//   pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//   title=\"Name may contain only letters, apostrophe, dash and spaces.\n// For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//   required\n// />\n\n// Стан, що зберігається в батьківському компоненті <App>, обов'язково\n// повинен бути наступного вигляду, додавати нові властивості не можна.\n\n// state = {\n//   contacts: [],\n//   name: ''\n// }\n\n// Кожен контакт повинен бути об'єктом з властивостями name та id.\n// Для генерації ідентифікаторів використовуй будь - який відповідний пакет,\n//   наприклад nanoid.Після завершення цього кроку, застосунок повинен виглядати\n//    приблизно так.\n\n// component preview\n\nimport { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport { FormComponent } from './Form/Form';\n\nexport class App extends Component {\n  state = {\n    contacts: [],\n    name: '',\n  };\n\n  handleAddContact = () => {\n    // if (isExist) {\n    //   alert(`${name} is already in contacts.`);\n    //   return;\n    // }\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          height: '100vh',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 40,\n          color: '#010101',\n        }}\n      >\n        <FormComponent onAddContact={this.handleAddContact} />\n      </div>\n    );\n  }\n}\n"],"mappings":";AAAA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,aAAa,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,GAAG,SAASL,SAAS,CAAC;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACjCC,KAAK,GAAG;MACNC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE;IACR,CAAC;IAAA,KAEDC,gBAAgB,GAAG,MAAM;MACvB;MACA;MACA;MACA;IAAA,CACD;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACP,oBACER,OAAA;MACES,KAAK,EAAE;QACLC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE,QAAQ;QACpBC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE;MACT,CAAE;MAAAC,QAAA,eAEFhB,OAAA,CAACF,aAAa;QAACmB,YAAY,EAAE,IAAI,CAACV;MAAiB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAEV;AACF"},"metadata":{},"sourceType":"module"}