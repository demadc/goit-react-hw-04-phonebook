{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GoIt/goit-react-hw-04-phonebook/src/components/Form/Form.jsx\";\nimport { Formik, Field, Form } from 'formik';\nimport { nanoid } from 'nanoid/non-secure';\nimport PropTypes from 'prop-types';\nimport { Label, Button } from './Form.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst idName = nanoid;\nconst idNum = nanoid;\nexport const ContactForm = ({\n  onAddContact\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: '',\n        number: ''\n      },\n      onSubmit: (values, actions) => {\n        onAddContact({\n          ...values,\n          id: nanoid()\n        });\n        actions.resetForm();\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          htmlFor: idName,\n          children: [\"Name\", /*#__PURE__*/_jsxDEV(Field, {\n            id: idName,\n            type: \"text\",\n            name: \"name\",\n            pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' \\\\-][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\"\n            // pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            ,\n            title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          children: [\"Number\", /*#__PURE__*/_jsxDEV(Field, {\n            id: idNum,\n            type: \"tel\",\n            name: \"number\",\n            pattern: \"\\\\+?\\\\d{1,4}?[ .\\\\-\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[ .\\\\-\\\\\\\\s]?\\\\d{1,4}[ .\\\\-\\\\s]?\\\\d{1,4}[ .\\\\-\\\\s]?\\\\d{1,9}\",\n            title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n            required: true,\n            placeholder: \"0XX-123-45-67\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Add contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = ContactForm;\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["Formik","Field","Form","nanoid","PropTypes","Label","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","idName","idNum","ContactForm","onAddContact","children","initialValues","name","number","onSubmit","values","actions","id","resetForm","htmlFor","type","pattern","title","required","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["/Users/admin/Documents/GoIt/goit-react-hw-04-phonebook/src/components/Form/Form.jsx"],"sourcesContent":["import { Formik, Field, Form } from 'formik';\nimport { nanoid } from 'nanoid/non-secure';\nimport PropTypes from 'prop-types';\nimport { Label, Button } from './Form.styled';\n\nconst idName = nanoid;\nconst idNum = nanoid;\n\nexport const ContactForm = ({ onAddContact }) => {\n  return (\n    <>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={(values, actions) => {\n          onAddContact({ ...values, id: nanoid() });\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <Label htmlFor={idName}>\n            Name\n            <Field\n              id={idName}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              // pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </Label>\n          <Label>\n            Number\n            <Field\n              id={idNum}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              placeholder=\"0XX-123-45-67\"\n            />\n          </Label>\n\n          <Button type=\"submit\">Add contact</Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,QAAQ;AAC5C,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,MAAM,GAAGR,MAAM;AACrB,MAAMS,KAAK,GAAGT,MAAM;AAEpB,OAAO,MAAMU,WAAW,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAC/C,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACR,MAAM;MACLgB,aAAa,EAAE;QACbC,IAAI,EAAE,EAAE;QACRC,MAAM,EAAE;MACV,CAAE;MACFC,QAAQ,EAAEA,CAACC,MAAM,EAAEC,OAAO,KAAK;QAC7BP,YAAY,CAAC;UAAE,GAAGM,MAAM;UAAEE,EAAE,EAAEnB,MAAM,CAAC;QAAE,CAAC,CAAC;QACzCkB,OAAO,CAACE,SAAS,CAAC,CAAC;MACrB,CAAE;MAAAR,QAAA,eAEFP,OAAA,CAACN,IAAI;QAAAa,QAAA,gBACHP,OAAA,CAACH,KAAK;UAACmB,OAAO,EAAEb,MAAO;UAAAI,QAAA,GAAC,MAEtB,eAAAP,OAAA,CAACP,KAAK;YACJqB,EAAE,EAAEX,MAAO;YACXc,IAAI,EAAC,MAAM;YACXR,IAAI,EAAC,MAAM;YACXS,OAAO,EAAC;YACR;YAAA;YACAC,KAAK,EAAC,wIAAwI;YAC9IC,QAAQ;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,eACRxB,OAAA,CAACH,KAAK;UAAAU,QAAA,GAAC,QAEL,eAAAP,OAAA,CAACP,KAAK;YACJqB,EAAE,EAAEV,KAAM;YACVa,IAAI,EAAC,KAAK;YACVR,IAAI,EAAC,QAAQ;YACbS,OAAO,EAAC,sGAAqF;YAC7FC,KAAK,EAAC,8FAA8F;YACpGC,QAAQ;YACRK,WAAW,EAAC;UAAe;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,eAERxB,OAAA,CAACF,MAAM;UAACmB,IAAI,EAAC,QAAQ;UAAAV,QAAA,EAAC;QAAW;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC,gBACT,CAAC;AAEP,CAAC;AAACE,EAAA,GA5CWrB,WAAW;AA8CxBA,WAAW,CAACsB,SAAS,GAAG;EACtBrB,YAAY,EAAEV,SAAS,CAACgC,IAAI,CAACC;AAC/B,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module"}