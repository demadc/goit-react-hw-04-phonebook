{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GoIt/goit-react-hw-02-phonebook/src/components/Form/Form.jsx\";\nimport { Formik, Field, Form } from 'formik';\nimport { nanoid } from 'nanoid/non-secure';\nimport PropTypes from 'prop-types';\n// import { Form, Label, Field, Button } from './Form.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst idName = nanoid;\n// const idNum = nanoid;\n\nexport const ContactForm = ({\n  onAddContact\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: '',\n        number: ''\n      },\n      onSubmit: (values, actions) => {\n        onAddContact({\n          ...values,\n          id: nanoid()\n        });\n        actions.resetForm();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      action: \"\",\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: idName,\n        children: [\"Contact Name\", /*#__PURE__*/_jsxDEV(Field, {\n          id: idName,\n          type: \"text\",\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' \\\\-][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\"\n          // pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          ,\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = ContactForm;\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"names":["Formik","Field","Form","nanoid","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","idName","ContactForm","onAddContact","children","initialValues","name","number","onSubmit","values","actions","id","resetForm","fileName","_jsxFileName","lineNumber","columnNumber","action","Label","htmlFor","type","pattern","title","required","Button","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["/Users/admin/Documents/GoIt/goit-react-hw-02-phonebook/src/components/Form/Form.jsx"],"sourcesContent":["import { Formik, Field, Form } from 'formik';\nimport { nanoid } from 'nanoid/non-secure';\nimport PropTypes from 'prop-types';\n// import { Form, Label, Field, Button } from './Form.styled';\n\nconst idName = nanoid;\n// const idNum = nanoid;\n\nexport const ContactForm = ({ onAddContact }) => {\n  return (\n    <>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={(values, actions) => {\n          onAddContact({ ...values, id: nanoid() });\n          actions.resetForm();\n        }}\n      ></Formik>\n      <Form action=\"\">\n        <Label htmlFor={idName}>\n          Contact Name\n          <Field\n            id={idName}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            // pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,QAAQ;AAC5C,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAOC,SAAS,MAAM,YAAY;AAClC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,MAAM,GAAGN,MAAM;AACrB;;AAEA,OAAO,MAAMO,WAAW,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAC/C,oBACEL,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACEN,OAAA,CAACN,MAAM;MACLa,aAAa,EAAE;QACbC,IAAI,EAAE,EAAE;QACRC,MAAM,EAAE;MACV,CAAE;MACFC,QAAQ,EAAEA,CAACC,MAAM,EAAEC,OAAO,KAAK;QAC7BP,YAAY,CAAC;UAAE,GAAGM,MAAM;UAAEE,EAAE,EAAEhB,MAAM,CAAC;QAAE,CAAC,CAAC;QACzCe,OAAO,CAACE,SAAS,CAAC,CAAC;MACrB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC,eACVlB,OAAA,CAACJ,IAAI;MAACuB,MAAM,EAAC,EAAE;MAAAb,QAAA,gBACbN,OAAA,CAACoB,KAAK;QAACC,OAAO,EAAElB,MAAO;QAAAG,QAAA,GAAC,cAEtB,eAAAN,OAAA,CAACL,KAAK;UACJkB,EAAE,EAAEV,MAAO;UACXmB,IAAI,EAAC,MAAM;UACXd,IAAI,EAAC,MAAM;UACXe,OAAO,EAAC;UACR;UAAA;UACAC,KAAK,EAAC,wIAAwI;UAC9IC,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eAERlB,OAAA,CAAC0B,MAAM;QAACJ,IAAI,EAAC,QAAQ;QAAAhB,QAAA,EAAC;MAAW;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA,eACP,CAAC;AAEP,CAAC;AAACS,EAAA,GA/BWvB,WAAW;AAiCxBA,WAAW,CAACwB,SAAS,GAAG;EACtBvB,YAAY,EAAEP,SAAS,CAAC+B,IAAI,CAACC;AAC/B,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module"}